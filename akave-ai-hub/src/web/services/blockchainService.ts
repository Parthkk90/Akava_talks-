import { ethers, Contract } from 'ethers';
import { config } from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, resolve } from 'path';

// Get __dirname equivalent for ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Load environment variables
config({ path: resolve(__dirname, '../../../.env') });

// The ABI of the ManifestRegistry contract
// In a real project, this would be loaded from a JSON file generated by the compiler
const contractAbi = [
  "event ManifestRegistered(string indexed manifestId, bytes32 hash, address indexed registrant, uint256 timestamp)",
  "function registerManifest(string calldata manifestId, bytes32 hash) external",
  "function getManifestHash(string calldata manifestId) external view returns (bytes32)",
  "function verifyManifest(string calldata manifestId, bytes32 hash) external view returns (bool)",
  "function owner() external view returns (address)",
  "function isRegistrar(address) external view returns (bool)",
  "function addRegistrar(address registrarAddress) external",
  "function removeRegistrar(address registrarAddress) external"
];

export class BlockchainService {
  private provider: ethers.JsonRpcProvider;
  private wallet: ethers.Wallet;
  private contract: Contract;
  private isEnabled: boolean;

  constructor() {
    const providerUrl = process.env.ETHEREUM_NODE_URL;
    const privateKey = process.env.REGISTRAR_PRIVATE_KEY;
    const contractAddress = process.env.MANIFEST_REGISTRY_CONTRACT_ADDRESS;
    const enableBlockchain = process.env.ENABLE_BLOCKCHAIN_FEATURES === 'true';

    // Check if blockchain features are enabled
    this.isEnabled = enableBlockchain && !!(providerUrl && privateKey && contractAddress);

    if (!this.isEnabled) {
      console.log('⚠️  Blockchain features are disabled. Set ENABLE_BLOCKCHAIN_FEATURES=true and configure Ethereum settings to enable.');
      return;
    }

    if (!providerUrl || !privateKey || !contractAddress) {
      throw new Error('Ethereum configuration is not set in the .env file');
    }

    this.provider = new ethers.JsonRpcProvider(providerUrl);
    this.wallet = new ethers.Wallet(privateKey, this.provider);
    this.contract = new ethers.Contract(contractAddress, contractAbi, this.wallet);
  }

  public async registerManifest(manifestId: string, hash: string): Promise<string> {
    if (!this.isEnabled) {
      throw new Error('Blockchain features are disabled. Please enable them in the configuration.');
    }

    try {
      // Ensure the hash is a valid bytes32
      const formattedHash = ethers.isBytes32(hash) ? hash : ethers.id(hash);

      const tx = await this.contract.registerManifest(manifestId, formattedHash);
      await tx.wait(); // Wait for the transaction to be mined
      return tx.hash;
    } catch (error) {
      console.error('Failed to register manifest on-chain:', error);
      // It's good to check for common errors, like if the manifest is already registered
      if (error.message.includes('Manifest already registered')) {
        throw new Error('This manifest has already been registered on the blockchain.');
      }
      throw new Error('On-chain registration failed.');
    }
  }

  public async verifyManifest(manifestId: string, hash: string): Promise<boolean> {
    if (!this.isEnabled) {
      throw new Error('Blockchain features are disabled. Please enable them in the configuration.');
    }

    try {
      const formattedHash = ethers.isBytes32(hash) ? hash : ethers.id(hash);
      return await this.contract.verifyManifest(manifestId, formattedHash);
    } catch (error) {
      console.error('Failed to verify manifest on-chain:', error);
      throw new Error('On-chain verification failed.');
    }
  }

  public async getManifestHash(manifestId: string): Promise<string> {
    if (!this.isEnabled) {
      throw new Error('Blockchain features are disabled. Please enable them in the configuration.');
    }

    try {
      return await this.contract.getManifestHash(manifestId);
    } catch (error) {
      console.error('Failed to get manifest hash from chain:', error);
      throw new Error('Failed to retrieve on-chain hash.');
    }
  }
}