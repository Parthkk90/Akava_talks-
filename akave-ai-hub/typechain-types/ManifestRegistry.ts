/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ManifestRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addRegistrar"
      | "getManifestHash"
      | "isRegistrar"
      | "owner"
      | "registerManifest"
      | "removeRegistrar"
      | "verifyManifest"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ManifestRegistered"): EventFragment;

  encodeFunctionData(
    functionFragment: "addRegistrar",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getManifestHash",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistrar",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerManifest",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRegistrar",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyManifest",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addRegistrar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getManifestHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistrar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerManifest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRegistrar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyManifest",
    data: BytesLike
  ): Result;
}

export namespace ManifestRegisteredEvent {
  export type InputTuple = [
    manifestId: string,
    hash: BytesLike,
    registrant: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    manifestId: string,
    hash: string,
    registrant: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    manifestId: string;
    hash: string;
    registrant: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ManifestRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): ManifestRegistry;
  waitForDeployment(): Promise<this>;

  interface: ManifestRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addRegistrar: TypedContractMethod<
    [registrarAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getManifestHash: TypedContractMethod<[manifestId: string], [string], "view">;

  isRegistrar: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  registerManifest: TypedContractMethod<
    [manifestId: string, hash: BytesLike],
    [void],
    "nonpayable"
  >;

  removeRegistrar: TypedContractMethod<
    [registrarAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  verifyManifest: TypedContractMethod<
    [manifestId: string, hash: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addRegistrar"
  ): TypedContractMethod<[registrarAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getManifestHash"
  ): TypedContractMethod<[manifestId: string], [string], "view">;
  getFunction(
    nameOrSignature: "isRegistrar"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerManifest"
  ): TypedContractMethod<
    [manifestId: string, hash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeRegistrar"
  ): TypedContractMethod<[registrarAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifyManifest"
  ): TypedContractMethod<
    [manifestId: string, hash: BytesLike],
    [boolean],
    "view"
  >;

  getEvent(
    key: "ManifestRegistered"
  ): TypedContractEvent<
    ManifestRegisteredEvent.InputTuple,
    ManifestRegisteredEvent.OutputTuple,
    ManifestRegisteredEvent.OutputObject
  >;

  filters: {
    "ManifestRegistered(string,bytes32,address,uint256)": TypedContractEvent<
      ManifestRegisteredEvent.InputTuple,
      ManifestRegisteredEvent.OutputTuple,
      ManifestRegisteredEvent.OutputObject
    >;
    ManifestRegistered: TypedContractEvent<
      ManifestRegisteredEvent.InputTuple,
      ManifestRegisteredEvent.OutputTuple,
      ManifestRegisteredEvent.OutputObject
    >;
  };
}
