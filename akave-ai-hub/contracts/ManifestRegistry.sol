// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

/**
 * @title ManifestRegistry
 * @dev A simple registry to store and verify file manifest hashes on-chain.
 * This contract maps a unique manifest ID (e.g., a UUID generated by the backend)
 * to its SHA-256 hash, providing a tamper-proof record of data integrity.
 */
contract ManifestRegistry {
    // Mapping from manifest ID to its hash
    mapping(string => bytes32) private _manifests;

    // Event to be emitted when a new manifest is registered
    event ManifestRegistered(string indexed manifestId, bytes32 hash, address indexed registrant, uint256 timestamp);

    // Owner of the contract, who can grant/revoke registration rights
    address public owner;

    // Mapping to control which addresses are allowed to register manifests
    mapping(address => bool) public isRegistrar;

    modifier onlyOwner() {
        require(msg.sender == owner, "Caller is not the owner");
       _;
    }

    modifier onlyRegistrar() {
        require(isRegistrar[msg.sender], "Caller is not an authorized registrar");
       _;
    }

    constructor() {
        owner = msg.sender;
        // The contract deployer is automatically a registrar
        isRegistrar[msg.sender] = true;
    }

    /**
     * @dev Registers a new manifest hash. Can only be called by an authorized registrar.
     * @param manifestId The unique ID of the manifest.
     * @param hash The SHA-256 hash of the file.
     */
    function registerManifest(string calldata manifestId, bytes32 hash) external onlyRegistrar {
        require(_manifests[manifestId] == 0, "Manifest already registered");
        _manifests[manifestId] = hash;
        emit ManifestRegistered(manifestId, hash, msg.sender, block.timestamp);
    }

    /**
     * @dev Retrieves the hash for a given manifest ID.
     * @param manifestId The unique ID of the manifest.
     * @return The hash of the manifest.
     */
    function getManifestHash(string calldata manifestId) external view returns (bytes32) {
        return _manifests[manifestId];
    }

    /**
     * @dev Verifies if a given hash matches the one stored on-chain for a specific manifest ID.
     * @param manifestId The unique ID of the manifest.
     * @param hash The hash to verify.
     * @return True if the hashes match, false otherwise.
     */
    function verifyManifest(string calldata manifestId, bytes32 hash) external view returns (bool) {
        return _manifests[manifestId] == hash;
    }

    /**
     * @dev Allows the owner to add a new registrar.
     * @param registrarAddress The address to authorize.
     */
    function addRegistrar(address registrarAddress) external onlyOwner {
        isRegistrar[registrarAddress] = true;
    }

    /**
     * @dev Allows the owner to remove a registrar.
     * @param registrarAddress The address to de-authorize.
     */
    function removeRegistrar(address registrarAddress) external onlyOwner {
        isRegistrar[registrarAddress] = false;
    }
}
